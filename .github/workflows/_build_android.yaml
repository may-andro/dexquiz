name: Build and upload android artifacts

on:
  workflow_call:
    inputs:
      flavor:
        type: string
        required: true
      target:
        type: string
        required: true
      build_env:
        type: string
        required: true
      upload_to_github:
        type: string
        required: true
      upload_to_firebase:
        type: string
        required: true
      upload_to_play_store:
        type: string
        required: true
    secrets:
      SIGNING_KEYSTORE:
        required: true
      SIGNING_KEY_ALIAS:
        required: true
      SIGNING_KEY_PASSWORD:
        required: true
      SIGNING_STORE_PASSWORD:
        required: true
      FIREBASE_APP_ID:
        required: true
      CREDENTIAL_FILE_CONTENT:
        required: true
      PLAYSTORE_SERVICE_ACCOUNT_JSON:
        required: true

env:
  DART_SDK_VERSION: 3.4.3
  FLUTTER_VERSION: 3.22.2
  JAVA_VERSION: "12.x"
  PROPERTIES_PATH: "./android/key.properties"

jobs:
  create_release_artifact:
    name: Create and upload apk and aab to github
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{env.JAVA_VERSION}}
          cache: 'gradle'

      - name: Setup the flutter environment
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: stable
          cache: true

      - name: Create directory
        run: mkdir -p android/app/.signing

      - name: Decoding base64 key into a file
        run: echo "${{ secrets.SIGNING_KEYSTORE }}" | base64 --decode > android/app/.signing/${{ inputs.flavor }}.jks

      - name: Create the key.properties
        run: |
          echo "storeFile=.signing/${{ inputs.flavor }}.jks" > android/key.properties
          echo "storePassword=${{ secrets.SIGNING_STORE_PASSWORD }}" >> ${{env.PROPERTIES_PATH}}
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> ${{env.PROPERTIES_PATH}}
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> ${{env.PROPERTIES_PATH}}

      - name: Extract version and build name from tag
        run: |
          if [ "$GITHUB_REF_TYPE" != "tag" ]; then
            echo "Ref name $GITHUB_REF_NAME is not a tag but a $GITHUB_REF_TYPE, not setting version and build name"
          else
            version=$(echo $GITHUB_REF_NAME | sed "s/-review//" | sed "s/-prod//" | sed "s/+.*//")
            build_name=$(echo $GITHUB_REF_NAME | sed "s/-review//" | sed "s/-prod//")
            echo "Extracted version: $version"
            echo "Extracted build name: $build_name"
            echo "::set-output name=version::$version"
            echo "::set-output name=build_name::$build_name"
          fi
        id: extract_version_and_build_name

      - name: Update pubspec.yaml with extracted version
        run: |
          if [ -n "${{ steps.extract_version_and_build_name.outputs.version }}" ]; then
          sed -i "s/^version: .*$/version: ${{ steps.extract_version_and_build_name.outputs.version }}/g" pubspec.yaml
          fi

      - name: Setup Melos
        run: |
          dart pub global activate melos
          melos bs

      - name: Run code generator
        run: melos gen --no-select

      - name: Generate icons
        run: flutter pub run flutter_launcher_icons -f flutter_launcher_icons-${{ inputs.flavor }}.yaml

      - name: Build apk file
        run: flutter build apk --flavor ${{ inputs.flavor }} -t ${{ inputs.target }} --dart-define=build_env=${{ inputs.build_env }} --build-name=${{ steps.extract_version_and_build_name.outputs.build_name }}
        timeout-minutes: 20

      - name: Build aab file
        run: flutter build appbundle --flavor ${{ inputs.flavor }} -t ${{ inputs.target }} --dart-define=build_env=${{ inputs.build_env }}

      - name: Upload APK artifact to Github
        uses: actions/upload-artifact@v3
        if: inputs.upload_to_github == 'true'
        with:
          name: app-${{ inputs.flavor }}-release.apk
          path: build/app/outputs/flutter-apk/app-${{ inputs.flavor }}-release.apk
          retention-days: 7

      - name: Upload AAB artifact to Github
        uses: actions/upload-artifact@v3
        if: inputs.upload_to_github == 'true'
        with:
          name: app-${{ inputs.flavor }}-release.aab
          path: build/app/outputs/bundle/${{ inputs.flavor }}Release/app-${{ inputs.flavor }}-release.aab
          retention-days: 7

      - name: Upload APK to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        if: inputs.upload_to_firebase == 'true'
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: Testers
          file: build/app/outputs/flutter-apk/app-${{ inputs.flavor }}-release.apk

      - name: Upload AAB to Play Store
        if: inputs.upload_to_play_store == 'true'
        uses: r0adkll/upload-google-play@v1.1.2
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT_JSON }}
          packageName: com.mayandro.dexquiz.${{ inputs.flavor }}
          releaseFiles: build/app/outputs/bundle/${{ inputs.flavor }}Release/app-${{ inputs.flavor }}-release.aab
          track: alpha





